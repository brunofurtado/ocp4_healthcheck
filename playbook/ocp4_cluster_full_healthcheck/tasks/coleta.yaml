---
 - name: Create report directory in /tmp 
   ansible.builtin.file:
     path: /tmp/report
     state: directory
     mode: '0755'
    
 - name: OC Version
   ansible.builtin.shell: oc version
   ignore_errors: true
   register: client_version

 - name: Openshift ID
   ansible.builtin.shell: oc get clusterversion -o jsonpath='{.items[].spec.clusterID}'
   ignore_errors: true
   register: id

 - name: Openshift Version
   ansible.builtin.shell: oc get clusterversion/version -o jsonpath='{.status.desired.version}'
   ignore_errors: true
   register: version

 - name: Openshift Update Available
   ansible.builtin.shell: oc get clusterversion/version -o jsonpath='{.status.availableUpdates[0].version}'
   ignore_errors: true
   register: update

 - name: Update cluster - last update started
   ansible.builtin.shell: oc get clusterversion -o jsonpath='{ .items[].status.history[].startedTime}{"\n"}'
   ignore_errors: true
   register: update_start

 - name: Update cluster - last update completed
   ansible.builtin.shell: oc get clusterversion -o jsonpath='{ .items[].status.history[].completionTime}{"\n"}'
   ignore_errors: true
   register: update_completed

 - name: Update cluster - uptadate path available
   ansible.builtin.shell: oc get clusterversion -o jsonpath='[{ .items[].status.history[*].version}]{"\n"}'
   ignore_errors: true
   register: update_path

 - name: Openshift Channel
   ansible.builtin.shell: oc get clusterversion/version -o jsonpath='{.spec.channel}'
   ignore_errors: true
   register: channel

 - name: Cluster URL
   ansible.builtin.shell: oc whoami --show-console=true
   ignore_errors: true
   register: console

 - name: Cluster API
   ansible.builtin.shell: oc whoami --show-server=true
   ignore_errors: true
   register: api

 - name: Kubeadmin user must have been removed
   ansible.builtin.shell: "oc get secrets kubeadmin -n kube-system"
   ignore_errors: true
   register: kubeadmin
   changed_when: false

 - name: Cluster DNS
   ansible.builtin.shell: oc get dns cluster -o jsonpath='{.spec.baseDomain}'
   ignore_errors: true
   register: dnsname

 - name: ClusterNetwork
   ansible.builtin.shell: oc get networks.operator.openshift.io -o jsonpath='{.items[].spec.defaultNetwork.type}'
   ignore_errors: true
   register: defaultNetwork

 - name: OpenShiftSDN BLOCK
   block:
     - name: ClusterNetwork SDN
       ansible.builtin.shell: oc get clusternetwork -o jsonpath='{.items[].network}'
       register: sdn_clusternetwork

     - name: Service Network
       ansible.builtin.shell: oc get clusternetwork -o jsonpath='{.items[].serviceNetwork}'
       register: sdn_servicenetwork

     - name: Network MTU
       ansible.builtin.shell: oc get clusternetwork -o jsonpath='{.items[].mtu}'
       register: sdn_mtu
   when: "'OpenShiftSDN' in defaultNetwork.stdout"

 - name: OVNKUBERNETES BLOCK
   block:
     - name: ClusterNetwork
       ansible.builtin.shell: oc get networks.operator.openshift.io -o jsonpath='{.items[].spec.clusterNetwork[*].cidr}'
       ignore_errors: true
       register: ovn_clusternetwork

     - name: Service Network
       ansible.builtin.shell: oc get networks.operator.openshift.io -o jsonpath='{.items[].spec.serviceNetwork}'
       ignore_errors: true
       register: ovn_servicenetwork

     - name: Network MTU
       ansible.builtin.shell: oc get networks.operator.openshift.io -o jsonpath='{.items[].spec.defaultNetwork.ovnKubernetesConfig.mtu}{"\n"}'
       ignore_errors: true
       register: ovn_mtu
   when: "'OVNKubernetes' in defaultNetwork.stdout "

 - name: Proxy must allow the communication between the cluster nodes and masters.
   ansible.builtin.shell: oc get proxy cluster -o jsonpath='
         {"HTTP_PROXY: "}{.status.httpProxy}
         {"HTTPS_PROXY: "}{.status.httpsProxy}
         {"NO_PROXY: "}{.status.noProxy}
         {"READINESS ENDPOINTS: "}{.status.readinessEndpoints[*]}
         {"TRUSTED CA: "}{.status.trustedCA}
         {"\n"}
         {"\n"}'
   ignore_errors: true
   changed_when: false
   register: proxy

 - name: Getting pods in all namespaces
   ansible.builtin.shell: oc get pods --all-namespaces | grep 'Running' | wc -l
   ignore_errors: true
   register: pods

 - name: Getting the number of Nodes
   ansible.builtin.shell: oc get nodes --no-headers | wc -l
   ignore_errors: true
   register: nodes

 - name: Getting all namespaces
   ansible.builtin.shell: oc get namespaces --all-namespaces --no-headers | wc -l
   ignore_errors: true
   register: namespaces

 - name: Getting the number of builds
   ansible.builtin.shell: oc get builds --all-namespaces -no-headers | wc -l
   ignore_errors: true
   register: builds

 - name: Getting the number of build configs
   ansible.builtin.shell: oc get bc --all-namespaces --no-headers | wc -l
   ignore_errors: true
   register: buildconfig

 - name: Getting the number of services
   ansible.builtin.shell: oc get services --all-namespaces --no-headers | wc -l
   ignore_errors: true
   register: services

 - name: Getting the number of CRDS
   ansible.builtin.shell: oc get crd | wc -l
   ignore_errors: true
   register: crds

 - name: Getting the number of  secrets
   ansible.builtin.shell: oc get secret --all-namespaces --no-headers | wc -l
   ignore_errors: true
   register: secrets

 - name: Getting configmaps
   ansible.builtin.shell: oc get cm --all-namespaces --no-headers | wc -l
   ignore_errors: true
   register: configmaps

 - name: Getting the status off all pods in the cluster
   ansible.builtin.shell: oc get pods --all-namespaces | awk '{print $4}' | sort | uniq -cd
   ignore_errors: true
   register: pods_status

 - name: Getting the quantity of pods by node
   ansible.builtin.shell: oc get pods --all-namespaces -o wide | grep -v NODE | awk '{print $8}' | sort | uniq -c | awk '{printf "Pods %-10s Node %-20s\n",$1,$2}'
   ignore_errors: true
   register: qtd_pods_node

 - name: Getting top 10 nodes by CPU
   ansible.builtin.shell: oc adm top nodes --sort-by=cpu | head -n 10
   ignore_errors: true
   register: top_nodes_cpu

 - name: Getting top 10 nodes by Memory
   ansible.builtin.shell: oc adm top nodes --sort-by=memory | head -n 10
   ignore_errors: true
   register: top_nodes_mem

 - name: Getting the top 10 pods by CPU
   ansible.builtin.shell: oc adm top pods --all-namespaces --sort-by=cpu | head -n 10
   ignore_errors: true
   register: top_pods_cpu

 - name: Getting the top 10 pods by Memory
   ansible.builtin.shell: oc adm top pods --all-namespaces --sort-by=memory | head -n 10
   ignore_errors: true
   register: top_pods_mem

 - name: Getting CSR in all namespaces
   ansible.builtin.shell: oc get csr --all-namespaces
   ignore_errors: true
   register: csr

 - name: Getting the Cluster Operators Status
   ansible.builtin.shell: oc get co
   ignore_errors: true
   register: clusteroperators

 - name: Getting the Machine Config Pool Status
   ansible.builtin.shell: oc get mcp
   ignore_errors: true
   register: mcp

 - name: Getting Pods NOT Running
   ansible.builtin.shell: oc get pods --all-namespaces | egrep -v 'Running|Completed' | wc -l
   ignore_errors: true
   register: pods_not_running

 - name: Getting API Resources with errors
   ansible.builtin.shell: oc api-resources |grep -i error
   ignore_errors: true
   register: api_resources

 - name: APIs In Use that will be removed in nexts updates of kubernets
   ansible.builtin.shell: for i in $(oc get apirequestcounts -o jsonpath='{range .items[?(@.status.removedInRelease!="")]}{.status.removedInRelease}{"\t"}{.metadata.name}{"\n"}{end}' | awk '{print $2}'); do oc get apirequestcounts $i --no-headers ; done
   ignore_errors: true
   register: apirequestcounts

 - name: Check if the instalation was IPI or UPI
   ansible.builtin.shell: oc get cm openshift-install --no-headers -o=custom-columns=NAME:metadata.name -n openshift-config
   register: instalation_check
   ignore_errors: true

 - name: Collect Provider information
   ansible.builtin.shell: oc get cm cluster-config-v1 -n kube-system -o yaml | grep apiVIP -A 9
   register: ipi_provider
   when: instalation_check is succeeded
   # fail on 4.12
   ignore_errors: true

 - name: Collect Provider information
   ansible.builtin.shell: oc get infrastructures/cluster --no-headers -o=custom-columns=Platform:.spec.platformSpec.type
   ignore_errors: true
   register: platform

 - name: Register variable in case of success
   ansible.builtin.shell: echo "IPI"
   register: instalation_ipi
   when: instalation_check is succeeded

 - name: Register variable in case of failure
   ansible.builtin.shell: echo 'UPI'
   register: instalation_upi
   when: instalation_check is failed

 - name: MCP Status
   ansible.builtin.shell:
     cmd: |
       oc get mcp -o jsonpath='{range .items[*]}
         {"MCP: "}{.metadata.name}
         {"Paused: "}{$.spec.paused}
         {"MachineCount: "}{$.status.machineCount}
         {"Max_Unavailable: "}{$.spec.maxUnavailable}
         {"Degraded: "}{$.status.degradedMachineCount}
         {"Message: "}{$.status.conditions[?(@.type=="NodeDegraded")].message}
         {"\n"}
         {"\n"}
         {end}'
   ignore_errors: true
   register: mcp_status

 - name:  Master Nodes Status
   ansible.builtin.shell:
     cmd: |
       oc get nodes -l node-role.kubernetes.io/master= -o jsonpath='{range .items[*]}
         {"Node: "}{.metadata.name}
         {"Ready: "}{$.status.conditions[3].status}
         {"IP Address: "}{$.status.addresses[0].address}
         {"Capacity CPU: "}{.status.capacity.cpu}
         {"Capacity Memory: "}{.status.capacity.memory}
         {"Allocatable CPU: "}{.status.allocatable.cpu}
         {"Allocatable Memory: "}{.status.allocatable.memory}
         {"Architecture: "}{.status.nodeInfo.architecture}
         {"Kernel: "}{.status.nodeInfo.kernelVersion}
         {"KubeletVersion: "}{.status.nodeInfo.kubeletVersion}
         {"Maximum Pods: "}{.status.allocatable.pods}
         {"Hostname: "}{$.status.addresses[1].address}
         {"Memory Pressure: "}{$.status.conditions[0].status}
         {"Disk Pressure: "}{$.status.conditions[1].status}
         {"PID Pressure: "}{$.status.conditions[2].status}
         {"\n"}{"\n"}{end}'
   ignore_errors: true
   register: master_nodes_status

 - name: Worker Nodes Status
   ansible.builtin.shell:
     cmd: |
       oc get nodes -l node-role.kubernetes.io/worker= -o jsonpath='{range .items[*]}
         {"Node: "}{.metadata.name}
         {"Ready: "}{$.status.conditions[3].status}
         {"IP Address: "}{$.status.addresses[0].address}
         {"Capacity CPU: "}{.status.capacity.cpu}
         {"Capacity Memory: "}{.status.capacity.memory}
         {"Allocatable CPU: "}{.status.allocatable.cpu}
         {"Allocatable Memory: "}{.status.allocatable.memory}
         {"Architecture: "}{.status.nodeInfo.architecture}
         {"Kernel: "}{.status.nodeInfo.kernelVersion}
         {"KubeletVersion: "}{.status.nodeInfo.kubeletVersion}
         {"Maximum Pods: "}{.status.allocatable.pods}
         {"Hostname: "}{$.status.addresses[1].address}
         {"Memory Pressure: "}{$.status.conditions[0].status}
         {"Disk Pressure: "}{$.status.conditions[1].status}
         {"PID Pressure: "}{$.status.conditions[2].status}
         {"\n"}{"\n"}{end}'
   ignore_errors: true
   register: worker_nodes_status

 - name:  Volume Snapshots
   ansible.builtin.shell:
     cmd: oc get volumesnapshots -A 
   ignore_errors: true
   register: volumesnapshots

 - name:  Events in default namespace
   ansible.builtin.shell:
     cmd: oc get ev -n default --sort-by lastTimestamp | grep -iv dns
   ignore_errors: true
   register: events_default_namespace

 - name: PVCs in unbound and error state
   ansible.builtin.shell: oc get pvc -A |grep -v Bound
   ignore_errors: true
   register: pvcs

 - set_fact:
     OCP_VERSION: "{{ version.stdout | default('NO DATA', true) }}"
     OCP_UPDATE: "{{ update.stdout  | default('NO DATA', true) }}"
     OCP_CHANNEL: "{{ channel.stdout | default('NO DATA', true)  }} "
     OCP_ID: "{{ id.stdout | default('NO DATA', true) }}"
     OCP_CONSOLE: "{{ console.stdout | default('NO DATA', true) }}"
     OCP_DNSNAME: "{{ dnsname.stdout | default('NO DATA', true) }}"
     OCP_API: "{{ api.stdout | default('NO DATA', true) }}"
     OCP_CLUSTERNETWORK: "{{ ovn_clusternetwork.stdout | default( sdn_clusternetwork.stdout, true) }}"
     OCP_SERVICENETWORK: "{{ ovn_servicenetwork.stdout | default( sdn_servicenetwork.stdout, true) }}"
     OCP_MTU: "{{ ovn_mtu.stdout | default( sdn_mtu.stdout, true) }}"
     OCP_PROXY: "{{proxy.stdout | default('NO DATA', true)}}"
     OCP_CLIENT_VERSION: "{{ client_version.stdout | default('NO DATA', true) }}"
     OCP_KUBEADMIN: "{{ (kubeadmin.stdout == 'kubeadmin') | ternary('True', 'False') }}"
     OCP_PODS: "{{ pods.stdout | default('NO DATA', true) }}"
     OCP_NODES: "{{ nodes.stdout | default('NO DATA', true) }}"
     OCP_NAMESPACES: "{{ namespaces.stdout | default('NO DATA', true) }}"
     OCP_BUILDS: "{{ builds.stdout | default('NO DATA', true) }}"
     OCP_BC: "{{ bc.stdout | default('NO DATA', true) }}"
     OCP_SERVICES: "{{ services.stdout | default('NO DATA', true) }}"
     OCP_CRDS: "{{ crds.stdout | default('NO DATA', true) }}"
     OCP_SECRETS: "{{ secrets.stdout | default('NO DATA', true) }}"
     OCP_CONFIGMAPS: "{{ configmaps.stdout | default('NO DATA', true) }}"
     OCP_QTD_PODS_NODE: "{{ qtd_pods_node.stdout | default('NO DATA', true) }}"
     OCP_TOP_NODES_CPU: "{{ top_nodes_cpu.stdout | default('NO DATA', true) }}"
     OCP_TOP_PODS_CPU: "{{ top_pods_cpu.stdout | default('NO DATA', true) }}"
     OCP_TOP_NODES_MEM: "{{ top_nodes_mem.stdout | default('NO DATA', true) }}"
     OCP_TOP_PODS_MEM: "{{ top_pods_mem.stdout | default('NO DATA', true) }}"
     OCP_CSRS: "{{ csr.stdout | default('NO DATA', true) }}"
     OCP_CO: "{{ clusteroperators.stdout | default('NO DATA', true) }}"
     OCP_MCP: "{{ mcp.stdout | default('NO DATA', true) }}"
     OCP_PODS_NOT_RUNNING: "{{pods_not_running.stdout | default('NO DATA', true) }}"
     OCP_API_RESOURCES: "{{api_resources.stdout | default('NO DATA', true) }}"
     OCP_PODS_STATUS: "{{pods_status.stdout | default('NO DATA', true) }}"
     OCP_APIREQUESTCOUNT: "{{apirequestcounts.stdout}}"
     OCP_MASTER_NODES: "{{master_nodes_status.stdout | default('NO DATA', true)}}"
     OCP_WORKER_NODES: "{{worker_nodes_status.stdout | default('NO DATA', true)}}"
     OCP_MCP_STATUS: "{{mcp_status.stdout | default('NO DATA', true)}}"
     OCP_PVCS: "{{pvcs.stdout | default('NO DATA', true)}}" 
     OCP_UPDATE_START: "{{update_start.stdout | default('NO DATA', true)}}"
     OCP_UPDATE_COMPLETED: "{{update_completed.stdout | default('NO DATA', true)}}"
     OCP_UPDATE_PATH: "{{update_path.stdout | default('NO DATA', true)}}"  
     OCP_INSTALATION_CHECK: "{{instalation_check.stdout | default('NO DATA', true)}}"
     OCP_API_PROVIDER: "{{ipi_provider.stdout | default('NO DATA', true)}}"
     OCP_INSTALATION_IPI: "{{instalation_ipi.stdout | default('NO DATA', true)}}"
     OCP_INSTALATION_UPI: "{{instalation_upi.stdout | default('NO DATA', true)}}"
     OCP_PLATFORM: "{{platform.stdout| default('NO DATA', true)}}"
     OCP_VOLUMESNAPSHOTS: "{{volumesnapshots.stdout | default('NO DATA', true)}}"
     OCP_EVENTS_DEFAULT_NAMESPACE: "{{events_default_namespace.stdout | default('NO DATA', true)}}" 

 - name: Create Report
   template:
     src: cluster-info.md.j2
     dest: /tmp/report/cluster.md
